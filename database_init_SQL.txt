/*
SQL Commands to Create Database Schema
Luke Kazmierowicz
1/12/17

README
    To rebuild the THINGS data base from scratch completely destroying the existing
    one, paste this entire text document into SQL prompt.
        At the end of this file there are examples of how to insert items into the
    items table and how to perform transactions (insert into the transactions table).

Important Notes:
    1) item_name is not restricted to being unique. The item_id is the primary key
    so it is the only column that needs to be unique. I propose that the front end
    run a query to check if an item already exists with the same name as the one being
    inserted and informs the user forcing them to enter a unique name.
    2) When a row is inserted into the transaction table a function is triggered that
    adds/subtracts the qty_changed from the item in the items table. It also sets the
    qty_remaining attribute in the new transaction to the proper value obtained from
    the items table.
*/

-- Create Database Commands --


    -- Completely wipe the database and all the schema. --
    DROP SCHEMA things CASCADE;

    -------------------------------------------------------------------
    CREATE SCHEMA things;

    -------------------------------------------------------------------
    CREATE TABLE items (
        item_id SERIAL,
        item_name   text    NOT NULL,
        description text,
        price       money,
        quantity    int NOT NULL DEFAULT 0,
        threshold   int NOT NULL,
        dateCreated timestamp DEFAULT CURRENT_TIMESTAMP,
        is_hidden   bool NOT NULL DEFAULT false,
        CHECK(quantity >= 0),
        CHECK(threshold >= 0),
        CHECK(price >= 0::money),
        PRIMARY KEY (item_id)
    );

    -------------------------------------------------------------------
    CREATE TABLE transactions (
        transaction_id  SERIAL,
        item_id         int NOT NULL REFERENCES items(item_id),
        person          text    NOT NULL DEFAULT 'anonymous',
        qty_changed     int		 NOT NULL,
        qty_remaining   int,
        timestamp       timestamp DEFAULT CURRENT_TIMESTAMP,
        PRIMARY KEY (transaction_id)
    );

    -------------------------------------------------------------------
    CREATE TABLE tags (
        tag_name    text,
        item_id int REFERENCES items (item_id),
        PRIMARY KEY (tag_name, item_id)
    );

    -------------------------------------------------------------------
    CREATE TABLE users (
        username    text,
        password    text NOT NULL,
        admin       boolean NOT NULL DEFAULT false,
        PRIMARY KEY (username)
    );

    -------------------------------------------------------------------
    CREATE VIEW inventory AS
        SELECT *
        FROM items NATURAL JOIN tags;

    -------------------------------------------------------------------
    CREATE FUNCTION set_qty_remaining() RETURNS trigger AS $set_qty_remaining$
        BEGIN
            UPDATE items
            SET quantity = (quantity + NEW.qty_changed)
            WHERE item_id = NEW.item_id;

            NEW.qty_remaining = (
                SELECT quantity
                FROM items
                WHERE item_id = NEW.item_id
            );

            RETURN NEW;
        END;
    $set_qty_remaining$ LANGUAGE plpgsql;

    -------------------------------------------------------------------
    CREATE TRIGGER set_qty_remaining BEFORE INSERT ON transactions
        FOR EACH ROW EXECUTE PROCEDURE set_qty_remaining();


    -------------------------------------------------------------------
    CREATE OR REPLACE FUNCTION item_id_with_name(text)
    RETURNS int LANGUAGE SQL AS
    $$ SELECT item_id FROM items WHERE item_name = $1; $$;


-- Insert Data Example --

    ----------------------------------------------------------------------------
    INSERT INTO items (item_name, description, price, quantity, threshold) VALUES
        ('Pop-Tarts', 'A tasty snack, best consumed toasted.', 2.50, 25, 10);
    INSERT INTO tags VALUES
        ('Food', 1);
    INSERT INTO tags VALUES
        ('Perishable', 1);

    ----------------------------------------------------------------------------
    INSERT INTO items (item_name, description, price, quantity, threshold) VALUES
        ('Black & White Printer Ink', 'For Printer In FAB 88', 27.99, 8, 5);
    INSERT INTO tags VALUES
        ('Printer Supplies', 2);
    INSERT INTO tags VALUES
        ('Stuff', 2);

    ----------------------------------------------------------------------------
    INSERT INTO items (item_name, description , price, quantity, threshold) VALUES
        ('HDMI to VGA Adapter', 'For classroom projectors.', 15.00, 4, 2);
    INSERT INTO tags VALUES
        ('Digital Adapters', 3);
    INSERT INTO tags VALUES
        ('Electronics', 3);
    INSERT INTO tags VALUES
        ('Stuff', 3);

    ----------------------------------------------------------------------------
    --the password for these 2 test users is 'cat'--
    INSERT INTO users (username, password, admin) VALUES
        ('admin', '$2a$10$X79.QYL2UnMDChg9adWRLel1w/Mn9b3GfBEL3rUdiYcA2LqaPsoaO', true);
    INSERT INTO users (username, password) VALUES
        ('user', '$2a$10$X79.QYL2UnMDChg9adWRLel1w/Mn9b3GfBEL3rUdiYcA2LqaPsoaO');



-- Perform some Transaction --

    -- lukekaz9 take 5 Pop-Tarts from the inventory --
    ----------------------------------------------------------------------------
    INSERT INTO transactions(item_id, person, qty_changed) VALUES
    (item_id_with_name('Black & White Printer Ink'), 'lukekaz9', -2);

    -- Seven Pop-Tarts are added to the inventory by joeShmo. --
    ----------------------------------------------------------------------------
    INSERT INTO transactions(item_id, person, qty_changed) VALUES
    (item_id_with_name('Pop-Tarts'), 'joeShmo', 7);
